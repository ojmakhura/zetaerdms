// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.authorisation;

import bw.co.roguesystems.zetaedrms.access.AccessPoint;
import bw.co.roguesystems.zetaedrms.access.AccessPointListDTO;
import bw.co.roguesystems.zetaedrms.access.AccessPointRepository;
import bw.co.roguesystems.zetaedrms.access.type.AccessPointType;
import bw.co.roguesystems.zetaedrms.access.type.AccessPointTypeRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Authorisation
 */
@Repository("authorisationDao")
public class AuthorisationDaoImpl
    extends AuthorisationDaoBase
{
    
    public AuthorisationDaoImpl(
        AccessPointRepository accessPointRepository,
        AccessPointTypeRepository accessPointTypeRepository,
        AuthorisationRepository authorisationRepository
    ) {

        super(
            accessPointRepository,
            accessPointTypeRepository,
            authorisationRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toAuthorisationDTO(
        Authorisation source,
        AuthorisationDTO target)
    {
        // TODO verify behavior of toAuthorisationDTO
        super.toAuthorisationDTO(source, target);
        // WARNING! No conversion for target.accessPoint (can't convert source.getAccessPoint():bw.co.bitri.cfpso.access.AccessPoint to bw.co.bitri.cfpso.access.AccessPointListDTO
        if(source.getAccessPoint() != null)
        {
            AccessPointListDTO accessPoint = new AccessPointListDTO();
            accessPoint.setId(source.getAccessPoint().getId());
            accessPoint.setName(source.getAccessPoint().getName());
            accessPoint.setUrl(source.getAccessPoint().getUrl());
            accessPoint.setTypeId(source.getAccessPoint().getAccessPointType().getId());
            accessPoint.setType(source.getAccessPoint().getAccessPointType().getName());
            target.setAccessPoint(accessPoint);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorisationDTO toAuthorisationDTO(final Authorisation entity)
    {
        // TODO verify behavior of toAuthorisationDTO
        return super.toAuthorisationDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Authorisation loadAuthorisationFromAuthorisationDTO(AuthorisationDTO authorisationDTO)
    {
        
        if (authorisationDTO.getId() == null)
        {
            return  Authorisation.Factory.newInstance();
        }
        else
        {
            return this.authorisationRepository.getReferenceById(authorisationDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Authorisation authorisationDTOToEntity(AuthorisationDTO authorisationDTO)
    {
        // TODO verify behavior of authorisationDTOToEntity
        Authorisation entity = this.loadAuthorisationFromAuthorisationDTO(authorisationDTO);
        this.authorisationDTOToEntity(authorisationDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void authorisationDTOToEntity(
        AuthorisationDTO source,
        Authorisation target,
        boolean copyIfNull)
    {
        // TODO verify behavior of authorisationDTOToEntity
        super.authorisationDTOToEntity(source, target, copyIfNull);


        if(source.getAccessPoint() != null) {

            target.setAccessPoint(accessPointRepository.findById(source.getAccessPoint().getId()).get());
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toAuthorisationListDTO(
        Authorisation source,
        AuthorisationListDTO target)
    {
        // TODO verify behavior of toAuthorisationListDTO
        super.toAuthorisationListDTO(source, target);
        // WARNING! No conversion for target.accessPoint (can't convert source.getAccessPoint():bw.co.bitri.cfpso.access.AccessPoint to java.lang.String

        if(source.getAccessPoint() != null)
        {
            AccessPoint point = source.getAccessPoint();

            target.setAccessPoint(point.getName());
            target.setAccessPointId(point.getId());
            target.setAccessPointUrl(point.getUrl());

            AccessPointType type = accessPointTypeRepository.findById(point.getAccessPointType().getId()).orElse(new AccessPointType());

            target.setAccessPointType(type.getName());

            // if(source.getRoles() != null)
            // {
            //     target.setRoles(source.getRoles());
            // }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorisationListDTO toAuthorisationListDTO(final Authorisation entity)
    {
        // TODO verify behavior of toAuthorisationListDTO
        return super.toAuthorisationListDTO(entity);

    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Authorisation loadAuthorisationFromAuthorisationListDTO(AuthorisationListDTO authorisationListDTO)
    {
        if (authorisationListDTO.getId() == null)
        {
            return  Authorisation.Factory.newInstance();
        }
        else
        {
            return this.authorisationRepository.getReferenceById(authorisationListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Authorisation authorisationListDTOToEntity(AuthorisationListDTO authorisationListDTO)
    {
        // TODO verify behavior of authorisationListDTOToEntity
        Authorisation entity = this.loadAuthorisationFromAuthorisationListDTO(authorisationListDTO);
        this.authorisationListDTOToEntity(authorisationListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void authorisationListDTOToEntity(
        AuthorisationListDTO source,
        Authorisation target,
        boolean copyIfNull)
    {
        // TODO verify behavior of authorisationListDTOToEntity
        super.authorisationListDTOToEntity(source, target, copyIfNull);

        if(source.getAccessPointId() != null)
        {
            target.setAccessPoint(accessPointRepository.findById(source.getAccessPointId()).get());
        }
    }
}