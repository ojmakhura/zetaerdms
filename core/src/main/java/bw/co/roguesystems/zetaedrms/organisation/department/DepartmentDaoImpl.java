// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.organisation.department;

import bw.co.roguesystems.zetaedrms.organisation.OrganisationListDTO;
import bw.co.roguesystems.zetaedrms.organisation.OrganisationRepository;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

/**
 * @see Department
 */
@Repository("departmentDao")
public class DepartmentDaoImpl
    extends DepartmentDaoBase
{
    
    public DepartmentDaoImpl(
        OrganisationRepository organisationRepository,
        DepartmentRepository departmentRepository
    ) {

        super(
            organisationRepository,
            departmentRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDepartmentDTO(
        Department source,
        DepartmentDTO target)
    {
        // TODO verify behavior of toDepartmentDTO
        super.toDepartmentDTO(source, target);
        // WARNING! No conversion for target.organisation (can't convert source.getOrganisation():bw.co.bitri.cfpso.organisation.Organisation to bw.co.bitri.cfpso.organisation.OrganisationListDTO
        if(source.getOrganisation() != null) {
            OrganisationListDTO organisation = new OrganisationListDTO();
            organisation.setId(source.getOrganisation().getId());
            organisation.setCode(source.getOrganisation().getCode());
            organisation.setName(source.getOrganisation().getName());
            organisation.setStatus(source.getOrganisation().getStatus());
            target.setOrganisation(organisation);
        }

        // WARNING! No conversion for target.serviceCenters (can't convert source.getServiceCenters():bw.co.bitri.cfpso.organisation.service.center.ServiceCenter to bw.co.bitri.cfpso.organisation.service.center.ServiceCenterListDTO
        // WARNING! No conversion for target.services (can't convert source.getServices():bw.co.bitri.cfpso.organisation.service.Service to bw.co.bitri.cfpso.organisation.service.ServiceListDTO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DepartmentDTO toDepartmentDTO(final Department entity)
    {
        // TODO verify behavior of toDepartmentDTO
        return super.toDepartmentDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Department loadDepartmentFromDepartmentDTO(DepartmentDTO departmentDTO)
    {
        if (departmentDTO.getId() == null)
        {
            return  Department.Factory.newInstance();
        }
        else
        {
            return this.departmentRepository.getReferenceById(departmentDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Department departmentDTOToEntity(DepartmentDTO departmentDTO)
    {
        // TODO verify behavior of departmentDTOToEntity
        Department entity = this.loadDepartmentFromDepartmentDTO(departmentDTO);
        this.departmentDTOToEntity(departmentDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void departmentDTOToEntity(
        DepartmentDTO source,
        Department target,
        boolean copyIfNull)
    {
        // TODO verify behavior of departmentDTOToEntity
        super.departmentDTOToEntity(source, target, copyIfNull);
        if(source.getOrganisation() != null) {
            target.setOrganisation(this.organisationRepository.getReferenceById(source.getOrganisation().getId()));
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toDepartmentListDTO(
        Department source,
        DepartmentListDTO target)
    {
        // TODO verify behavior of toDepartmentListDTO
        super.toDepartmentListDTO(source, target);
        // WARNING! No conversion for target.organisation (can't convert source.getOrganisation():bw.co.bitri.cfpso.organisation.Organisation to java.lang.String
        if(source.getOrganisation() != null) {
            target.setOrganisation(source.getOrganisation().getName());
            target.setOrganisationId(source.getOrganisation().getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DepartmentListDTO toDepartmentListDTO(final Department entity)
    {
        // TODO verify behavior of toDepartmentListDTO
        return super.toDepartmentListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Department loadDepartmentFromDepartmentListDTO(DepartmentListDTO departmentListDTO)
    {
        if (departmentListDTO.getId() == null)
        {
            return  Department.Factory.newInstance();
        }
        else
        {
            return this.departmentRepository.getReferenceById(departmentListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Department departmentListDTOToEntity(DepartmentListDTO departmentListDTO)
    {
        // TODO verify behavior of departmentListDTOToEntity
        Department entity = this.loadDepartmentFromDepartmentListDTO(departmentListDTO);
        this.departmentListDTOToEntity(departmentListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void departmentListDTOToEntity(
        DepartmentListDTO source,
        Department target,
        boolean copyIfNull)
    {
        // TODO verify behavior of departmentListDTOToEntity
        super.departmentListDTOToEntity(source, target, copyIfNull);

        if(StringUtils.isNotBlank(source.getOrganisationId())) {
            target.setOrganisation(this.organisationRepository.getReferenceById(source.getOrganisationId()));
        }
    }
}