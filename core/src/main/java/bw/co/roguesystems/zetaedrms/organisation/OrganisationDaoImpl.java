// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.organisation;

import bw.co.roguesystems.zetaedrms.organisation.department.DepartmentRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Organisation
 */
@Repository("organisationDao")
public class OrganisationDaoImpl
    extends OrganisationDaoBase
{
    
    
    public OrganisationDaoImpl(
        DepartmentRepository departmentRepository,
        OrganisationRepository organisationRepository
    ) {

        super(
            departmentRepository,
            organisationRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toOrganisationDTO(
        Organisation source,
        OrganisationDTO target)
    {
        // TODO verify behavior of toOrganisationDTO
        super.toOrganisationDTO(source, target);
        // WARNING! No conversion for target.departments (can't convert source.getDepartments():bw.co.bitri.cfpso.organisation.department.Department to bw.co.bitri.cfpso.organisation.department.DepartmentListDTO
        // WARNING! No conversion for target.serviceCenters (can't convert source.getServiceCenters():bw.co.bitri.cfpso.organisation.service.center.ServiceCenter to bw.co.bitri.cfpso.organisation.service.center.ServiceCenterListDTO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganisationDTO toOrganisationDTO(final Organisation entity)
    {
        // TODO verify behavior of toOrganisationDTO
        return super.toOrganisationDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Organisation loadOrganisationFromOrganisationDTO(OrganisationDTO organisationDTO)
    {
        if (organisationDTO.getId() == null)
        {
            return  Organisation.Factory.newInstance();
        }
        else
        {
            return this.load(organisationDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Organisation organisationDTOToEntity(OrganisationDTO organisationDTO)
    {
        // TODO verify behavior of organisationDTOToEntity
        Organisation entity = this.loadOrganisationFromOrganisationDTO(organisationDTO);
        this.organisationDTOToEntity(organisationDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void organisationDTOToEntity(
        OrganisationDTO source,
        Organisation target,
        boolean copyIfNull)
    {
        // TODO verify behavior of organisationDTOToEntity
        super.organisationDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toOrganisationListDTO(
        Organisation source,
        OrganisationListDTO target)
    {
        // TODO verify behavior of toOrganisationListDTO
        super.toOrganisationListDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganisationListDTO toOrganisationListDTO(final Organisation entity)
    {
        // TODO verify behavior of toOrganisationListDTO
        return super.toOrganisationListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Organisation loadOrganisationFromOrganisationListDTO(OrganisationListDTO organisationListDTO)
    {
        if (organisationListDTO.getId() == null)
        {
            return  Organisation.Factory.newInstance();
        }
        else
        {
            return this.load(organisationListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Organisation organisationListDTOToEntity(OrganisationListDTO organisationListDTO)
    {
        // TODO verify behavior of organisationListDTOToEntity
        Organisation entity = this.loadOrganisationFromOrganisationListDTO(organisationListDTO);
        this.organisationListDTOToEntity(organisationListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void organisationListDTOToEntity(
        OrganisationListDTO source,
        Organisation target,
        boolean copyIfNull)
    {
        // TODO verify behavior of organisationListDTOToEntity
        super.organisationListDTOToEntity(source, target, copyIfNull);
    }
}