// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.access;

import bw.co.roguesystems.zetaedrms.access.type.AccessPointTypeDTO;
import bw.co.roguesystems.zetaedrms.access.type.AccessPointTypeRepository;
import org.springframework.stereotype.Repository;

/**
 * @see AccessPoint
 */
@Repository("accessPointDao")
public class AccessPointDaoImpl
    extends AccessPointDaoBase
{
    
    public AccessPointDaoImpl(
        AccessPointTypeRepository accessPointTypeRepository,
        AccessPointRepository accessPointRepository
    ) {

        super(
            accessPointTypeRepository,
            accessPointRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointDTO(
        AccessPoint source,
        AccessPointDTO target)
    {
        // TODO verify behavior of toAccessPointDTO
        super.toAccessPointDTO(source, target);
        // WARNING! No conversion for target.createdDate (can't convert source.getCreatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.updatedDate (can't convert source.getUpdatedDate():java.util.Date to java.util.Date
        // WARNING! No conversion for target.accessPointType (can't convert source.getAccessPointType():bw.co.bitri.cfpso.access.type.AccessPointType to bw.co.bitri.cfpso.access.type.AccessPointTypeDTO

        if(source.getAccessPointType() != null)
        {
            
            AccessPointTypeDTO type = new AccessPointTypeDTO();

            type.setId(source.getAccessPointType().getId());
            type.setName(source.getAccessPointType().getName());
            type.setDescription(source.getAccessPointType().getDescription());
            type.setCode(source.getAccessPointType().getCode());

            target.setAccessPointType(type);

        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointDTO toAccessPointDTO(final AccessPoint entity)
    {
        // TODO verify behavior of toAccessPointDTO
        return super.toAccessPointDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private AccessPoint loadAccessPointFromAccessPointDTO(AccessPointDTO accessPointDTO)
    {
        if (accessPointDTO.getId() == null)
        {
            return  AccessPoint.Factory.newInstance();
        }
        else
        {
            return this.load(accessPointDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public AccessPoint accessPointDTOToEntity(AccessPointDTO accessPointDTO)
    {
        // TODO verify behavior of accessPointDTOToEntity
        AccessPoint entity = this.loadAccessPointFromAccessPointDTO(accessPointDTO);
        this.accessPointDTOToEntity(accessPointDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointDTOToEntity(
        AccessPointDTO source,
        AccessPoint target,
        boolean copyIfNull)
    {
        // TODO verify behavior of accessPointDTOToEntity
        super.accessPointDTOToEntity(source, target, copyIfNull);

        if(source.getAccessPointType() != null) {

            target.setAccessPointType(this.accessPointTypeRepository.getReferenceById(source.getAccessPointType().getId()));
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointListDTO(
        AccessPoint source,
        AccessPointListDTO target)
    {
        // TODO verify behavior of toAccessPointListDTO
        super.toAccessPointListDTO(source, target);

        if(source.getAccessPointType() != null) {

            target.setTypeId(source.getAccessPointType().getId());
            target.setType(source.getAccessPointType().getName());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointListDTO toAccessPointListDTO(final AccessPoint entity)
    {
        // TODO verify behavior of toAccessPointListDTO
        return super.toAccessPointListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private AccessPoint loadAccessPointFromAccessPointListDTO(AccessPointListDTO accessPointListDTO)
    {
        if (accessPointListDTO.getId() == null)
        {
            return  AccessPoint.Factory.newInstance();
        }
        else
        {
            return this.load(accessPointListDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public AccessPoint accessPointListDTOToEntity(AccessPointListDTO accessPointListDTO)
    {
        // TODO verify behavior of accessPointListDTOToEntity
        AccessPoint entity = this.loadAccessPointFromAccessPointListDTO(accessPointListDTO);
        this.accessPointListDTOToEntity(accessPointListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointListDTOToEntity(
        AccessPointListDTO source,
        AccessPoint target,
        boolean copyIfNull)
    {
        // TODO verify behavior of accessPointListDTOToEntity
        super.accessPointListDTOToEntity(source, target, copyIfNull);

        if(source.getTypeId() != null) {

            target.setAccessPointType(this.accessPointTypeRepository.getReferenceById(source.getTypeId()));
        }
    }
}