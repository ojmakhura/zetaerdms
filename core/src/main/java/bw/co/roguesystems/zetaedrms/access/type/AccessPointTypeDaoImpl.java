// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.access.type;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see AccessPointType
 */
@Repository("accessPointTypeDao")
public class AccessPointTypeDaoImpl
    extends AccessPointTypeDaoBase
{
    
    public AccessPointTypeDaoImpl(
        AccessPointTypeRepository accessPointTypeRepository
    ) {

        super(
            accessPointTypeRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<AccessPointType> handleFindByCriteria(String criteria)
    {
        Specification<AccessPointType> spec = null;

        if (StringUtils.isNotBlank(criteria)) {

            spec = (root, query, cb) -> {
                return cb.or(
                        cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                        cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%"));
            };
        }

        return this.accessPointTypeRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toAccessPointTypeDTO(
        AccessPointType source,
        AccessPointTypeDTO target)
    {
        // TODO verify behavior of toAccessPointTypeDTO
        super.toAccessPointTypeDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccessPointTypeDTO toAccessPointTypeDTO(final AccessPointType entity)
    {
        // TODO verify behavior of toAccessPointTypeDTO
        return super.toAccessPointTypeDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private AccessPointType loadAccessPointTypeFromAccessPointTypeDTO(AccessPointTypeDTO accessPointTypeDTO)
    {
        // TODO implement loadAccessPointTypeFromAccessPointTypeDTO
        throw new UnsupportedOperationException("bw.co.roguesystems.zetaedrms.access.type.loadAccessPointTypeFromAccessPointTypeDTO(AccessPointTypeDTO) not yet implemented.");

        /* A typical implementation looks like this:
        if (accessPointTypeDTO.getId() == null)
        {
            return  AccessPointType.Factory.newInstance();
        }
        else
        {
            return this.load(accessPointTypeDTO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public AccessPointType accessPointTypeDTOToEntity(AccessPointTypeDTO accessPointTypeDTO)
    {
        // TODO verify behavior of accessPointTypeDTOToEntity
        AccessPointType entity = this.loadAccessPointTypeFromAccessPointTypeDTO(accessPointTypeDTO);
        this.accessPointTypeDTOToEntity(accessPointTypeDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void accessPointTypeDTOToEntity(
        AccessPointTypeDTO source,
        AccessPointType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of accessPointTypeDTOToEntity
        super.accessPointTypeDTOToEntity(source, target, copyIfNull);
    }
}