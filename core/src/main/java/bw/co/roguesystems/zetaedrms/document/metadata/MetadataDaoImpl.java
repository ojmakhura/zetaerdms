// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.zetaedrms.document.metadata;

import java.util.Collection;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import com.vladmihalcea.hibernate.util.StringUtils;

/**
 * @see Metadata
 */
@Repository("metadataDao")
public class MetadataDaoImpl
    extends MetadataDaoBase
{
    
    public MetadataDaoImpl(
        MetadataRepository metadataRepository
    ) {

        super(
            metadataRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Metadata> handleFindByCriteria(String criteria)
    {
        Specification<Metadata> spec = null;

        if(org.apache.commons.lang3.StringUtils.isNotBlank(criteria)) {
            spec = (root, query, cb) -> cb.or(
                cb.like(cb.lower(root.get("code")), "%" + criteria.toLowerCase() + "%"),
                cb.like(cb.lower(root.get("name")), "%" + criteria.toLowerCase() + "%")
            );
        }

        return this.metadataRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toMetadataDTO(
        Metadata source,
        MetadataDTO target)
    {
        // TODO verify behavior of toMetadataDTO
        super.toMetadataDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetadataDTO toMetadataDTO(final Metadata entity)
    {
        // TODO verify behavior of toMetadataDTO
        return super.toMetadataDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Metadata loadMetadataFromMetadataDTO(MetadataDTO metadataDTO)
    {
        if (metadataDTO.getId() == null)
        {
            return  Metadata.Factory.newInstance();
        }
        else
        {
            return this.load(metadataDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Metadata metadataDTOToEntity(MetadataDTO metadataDTO)
    {
        // TODO verify behavior of metadataDTOToEntity
        Metadata entity = this.loadMetadataFromMetadataDTO(metadataDTO);
        this.metadataDTOToEntity(metadataDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void metadataDTOToEntity(
        MetadataDTO source,
        Metadata target,
        boolean copyIfNull)
    {
        // TODO verify behavior of metadataDTOToEntity
        super.metadataDTOToEntity(source, target, copyIfNull);
    }
}