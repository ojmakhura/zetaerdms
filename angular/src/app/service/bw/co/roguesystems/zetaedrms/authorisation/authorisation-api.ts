// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthorisationListDTO } from '@app/model/bw/co/roguesystems/zetaedrms/authorisation/authorisation-list-dto';
import { AuthorisationDTO } from '@app/model/bw/co/roguesystems/zetaedrms/authorisation/authorisation-dto';
import { AuthorisationCriteria } from '@app/model/bw/co/roguesystems/zetaedrms/authorisation/authorisation-criteria';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';

@Injectable({
  providedIn: 'root'
})
export class AuthorisationApi {
    
    protected path = '/authorisation';

    private http = inject(HttpClient);

    public findById(id: string | any ): Observable<AuthorisationDTO | any> {

        return this.http.get<AuthorisationDTO | any>(this.path + `/id/${id}`);
    }

    public findByRolesAndUrl(url: string | any , roles: Array<string> | any ): Observable<AuthorisationListDTO[] | any[]> {

        return this.http.get<AuthorisationListDTO[] | any[]>(this.path + `/find-by-roles-url?url=${url}&roles=${roles}`);
    }

    public findByRolesAndUrlPaged(url: string | any , roles: Array<string> | any , pageNumber: number | any , pageSize: number | any ): Observable<Page<AuthorisationListDTO>[] | any[]> {

        return this.http.get<Page<AuthorisationListDTO>[] | any[]>(this.path + `/by-roles-url/paged?url=${url}&roles=${roles}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public findRestrictedViewItems(url: string | any , roles: Array<string> | any ): Observable<AuthorisationListDTO[] | any[]> {

        return this.http.get<AuthorisationListDTO[] | any[]>(this.path + `/restricted-view-items?url=${url}&roles=${roles}`);
    }

    public getAccessTypeCodeAuthorisations(roles: Array<string> | any , accessPointTypeCodes: Array<string> | any ): Observable<AuthorisationListDTO[] | any[]> {

        return this.http.get<AuthorisationListDTO[] | any[]>(this.path + `/authorised?roles=${roles}&accessPointTypeCodes=${accessPointTypeCodes}`);
    }

    public getAccessTypeCodeAuthorisationsPaged(roles: Array<string> | any , accessPointTypeCodes: Array<string> | any , pageNumber: number | any , pageSize: number | any ): Observable<Page<AuthorisationListDTO>[] | any[]> {

        return this.http.get<Page<AuthorisationListDTO>[] | any[]>(this.path + `/authorised/paged?roles=${roles}&accessPointTypeCodes=${accessPointTypeCodes}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public getAll(): Observable<AuthorisationListDTO[] | any[]> {

        return this.http.get<AuthorisationListDTO[] | any[]>(this.path + `/all`);
    }

    public getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<Page<AuthorisationListDTO> | any> {

        return this.http.get<Page<AuthorisationListDTO> | any>(this.path + `/all/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public remove(id: string | any ): Observable<boolean | any> {

        return this.http.delete<boolean | any>(this.path + `/id/${id}`);
    }

    public save(authorisation: AuthorisationDTO | any ): Observable<AuthorisationDTO | any> {

        return this.http.post<AuthorisationDTO | any>(this.path, authorisation);
    }

    public search(criteria: AuthorisationCriteria | any ): Observable<AuthorisationListDTO[] | any[]> {

        return this.http.post<AuthorisationListDTO[] | any[]>(this.path + `/search`, criteria);
    }

    public searchPaged(criteria: SearchObject<AuthorisationCriteria> | any ): Observable<Page<AuthorisationListDTO>[] | any[]> {

        return this.http.post<Page<AuthorisationListDTO>[] | any[]>(this.path + `/search/paged`, criteria);
    }

}
