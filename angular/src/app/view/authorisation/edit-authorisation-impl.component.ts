// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject, signal } from '@angular/core';
import { EditAuthorisationComponent } from '@app/view/authorisation/edit-authorisation.component';
import { EditAuthorisationVarsForm } from '@app/view/authorisation/edit-authorisation.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { LoaderComponent } from "@shared/loader/loader.component";
import { AuthorisationEditorImplComponent } from '@app/components/authorisation/authorisation-editor-impl.component';
import { AppEnvStore } from '@app/store/app-env.state';
import { CommonModule } from '@angular/common';
import { UrlTree } from '@angular/router';
import { of } from 'rxjs';

export enum EditAuthorisationRestrictions {
  DELETE_BUTTON = '/authorisation/edit{button:delete}',
}

@Component({
  selector: 'app-edit-authorisation',
  templateUrl: './edit-authorisation.component.html',
  styleUrls: ['./edit-authorisation.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    CsvModule,
    LoaderComponent,
    AuthorisationEditorImplComponent,
  ],
})
export class EditAuthorisationImplComponent extends EditAuthorisationComponent {
  private appState = inject(AppEnvStore);
  excludedRoles: string[] = ['offline_access', 'uma_authorization', 'default-roles-bocraportal'];
  deleteUnrestricted = signal(false);
  deleting = false;

  constructor() {
    super();
    this.authorisationApiStore.reset();
    this.success = this.authorisationApiStore.success;
    this.loading = this.authorisationApiStore.loading;
    this.error = this.authorisationApiStore.error;
    this.messages = this.authorisationApiStore.messages;
    this.loaderMessage = this.authorisationApiStore.loaderMessage;

    effect(() => {
      let restrictedItems = this.authorisationApiStore.dataList();

      if (restrictedItems) {
        restrictedItems.forEach((item) => {
          if (item === EditAuthorisationRestrictions.DELETE_BUTTON) {
            this.deleteUnrestricted = signal(true);
          }
        });
      }

      if (this.success() && this.deleting) {
        this.deleting = false;
        this.router.navigate(['/access']);
      }
    });
  }

  override beforeOnInit(form: EditAuthorisationVarsForm): EditAuthorisationVarsForm {
    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.authorisationApiStore.findById(params);
      }
    });

    const tree: UrlTree = this.router.parseUrl(this.router.url);
    let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

    this.authorisationApiStore.findRestrictedViewItems({
      url: encodeURIComponent(`/${cleanUrl}{`),
      roles: this.appState.realmRoles().map((role) => role.value),
    });
    return form;
  }

  doNgOnDestroy(): void { }

  override beforeEditAuthorisationSave(form: any): void {
    let authorisation = this.authorisation.formGroupControl.value;
    this.authorisationApiStore.save({ authorisation });
  }

  editAuthorisationDelete() {
    if (confirm('Are you sure you want to delete this item? This action cannot be undone.')) {
      this.deleting = true;
      let authorisation = this.authorisation.formGroupControl.value;
      this.authorisationApiStore.remove({ id: authorisation.id });
    }
  }

  override editAuthorisationFormReset() {
    super.editAuthorisationFormReset();
    this.authorisation.accessPointFilteredList$ = of([]);
  }
}
