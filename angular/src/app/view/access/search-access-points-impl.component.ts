import { CommonModule } from '@angular/common';
// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, inject } from '@angular/core';
import { SearchAccessPointsComponent } from '@app/view/access/search-access-points.component';
import { SearchAccessPointsVarsForm } from '@app/view/access/search-access-points.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from "@shared/loader/loader.component";
import { UrlTree } from '@angular/router';
import { AppEnvStore } from '@app/store/app-env.state';
import { AuthorisationApiStore } from '@app/store/bw/co/roguesystems/zetaedrms/authorisation/authorisation-api.store';
import { MatPaginator } from '@angular/material/paginator';
import { AccessPointCriteria } from '@app/model/bw/co/roguesystems/zetaedrms/access/access-point-criteria';
import { SearchObject } from '@app/model/search-object';

@Component({
  selector: 'app-search-access-points',
  templateUrl: './search-access-points.component.html',
  styleUrls: ['./search-access-points.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class SearchAccessPointsImplComponent extends SearchAccessPointsComponent {
  private appState = inject(AppEnvStore);
  private authorisationApiStore = inject(AuthorisationApiStore);

  constructor() {
    super();
    this.accessPointApiStore.reset();
    this.success = this.accessPointApiStore.success;
    this.loading = this.accessPointApiStore.loading;
    this.error = this.accessPointApiStore.error;
    this.messages = this.accessPointApiStore.messages;
    this.loaderMessage = this.accessPointApiStore.loaderMessage;
    this.accessPointsTablePaged = true;
    this.accessPointsTableSignal = this.accessPointApiStore.dataPage;
  }

  override beforeOnInit(form: SearchAccessPointsVarsForm): SearchAccessPointsVarsForm {
    const tree: UrlTree = this.router.parseUrl(this.router.url);
    let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

    this.authorisationApiStore.findRestrictedViewItems({
      url: encodeURIComponent(`/${cleanUrl}{`),
      roles: this.appState.realmRoles().map((role) => role.value),
    });
    return form;
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit(): void {
    this.accessPointsTable?.tablePaginator?.page?.subscribe({
      next: (paginator: MatPaginator) => {
        this.doSearch(paginator.pageIndex, paginator.pageSize);
      },
    });
  }

  override beforeSearchAccessPointsSearch(form: any): void {
    this.doSearch();
  }

  private doSearch(pageNumber: number = 0, pageSize: number = 10): void {
    // let tmp = this.criteria.formGroupControl.value;

    let criteria = new SearchObject<AccessPointCriteria>();
    criteria.criteria = {};

    // if (tmp.name) {
    //   criteria.criteria.name = tmp.name;
    // }

    // if (tmp.url) {
    //   criteria.criteria.url = tmp.url;
    // }

    // if (tmp.type) {
    //   criteria.criteria.typeId = tmp.type.id;
    // }

    criteria.pageNumber = pageNumber;
    criteria.pageSize = pageSize;

    this.accessPointApiStore.pagedSearch({ criteria: criteria });
  }
}
