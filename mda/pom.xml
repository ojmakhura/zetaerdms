<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- These settings apply specifically to the andromda code generation process. To generate code without
    compiling or testing or packaging, run mvn install from /mda instead of from the root directory. -->
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>bw.co.roguesystems.zetaedrms</groupId>
        <artifactId>zetaedrms</artifactId>
        <version>0.0.1</version>
    </parent>
    <artifactId>zetaedrms-mda</artifactId>
    <packaging>pom</packaging>
    <name>Zeta EDRMS MDA</name>
    <dependencies>
        <!-- provided profile dependencies are not added to the manifest, used only at code generation time -->
        <dependency>
            <groupId>org.andromda.profiles.uml2</groupId>
            <artifactId>andromda-profile</artifactId>
            <version>${andromda.version}</version>
            <type>xml.zip</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.cartridges</groupId>
            <artifactId>andromda-spring-cartridge</artifactId>
            <version>${andromda.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.cartridges</groupId>
            <artifactId>andromda-hibernate-cartridge</artifactId>
            <version>${andromda.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.cartridges</groupId>
            <artifactId>andromda-webservice-cartridge</artifactId>
            <version>${andromda.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.cartridges</groupId>
            <artifactId>andromda-java-cartridge</artifactId>
            <version>${andromda.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.cartridges</groupId>
            <artifactId>andromda-angular-cartridge</artifactId>
            <version>${andromda.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.translationlibraries</groupId>
            <artifactId>andromda-ocl-validation-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.andromda.translationlibraries</groupId>
            <artifactId>andromda-ocl-query-library</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>
    <profiles>
        <profile>
            <id>eclipse</id>
            <build>
                <plugins>
                    <!-- This will overwrite top level .project and .classpath each time.
                         The maven Eclipse plugin in mda/pom.xml does a better job anyway. See mda/eclipse.bat.-->
                    <plugin>
                        <groupId>org.andromda.maven.plugins</groupId>
                        <artifactId>andromdapp-maven-plugin</artifactId>
                        <version>${andromda.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>eclipse</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <excludes>
                                <exclude>app/pom.xml</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <build>
        <sourceDirectory>${project.basedir}/src/main/uml</sourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.andromda.maven.plugins</groupId>
                <artifactId>andromda-maven-plugin</artifactId>
                <version>${andromda.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <configurationUri>${project.basedir}/src/main/config/andromda.xml</configurationUri>
                    <!-- Check model dates vs output file dates from previous gen, skip if files are later -->
                    <lastModifiedCheck>true</lastModifiedCheck>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <properties>
        <model.uri>file:${project.basedir}/src/main/uml/zetaedrms.uml</model.uri>
        <javaVersion>${java.version}</javaVersion>
        <filter></filter>
        <validation>true</validation>
        <!-- ant script location for temp copy of resources -->
        <andromda.project>${project.basedir}/..</andromda.project>
        <conf.dir>${project.basedir}/src/main/config</conf.dir>
        <!-- cartridge output locations -->
        <common.generated.dir>${project.basedir}/../common/target/src/main/java</common.generated.dir>
        <common.manual.dir>${project.basedir}/../common/src/main/java</common.manual.dir>
        <core.generated.dir>${project.basedir}/../core/target/src/main/java</core.generated.dir>
        <core.manual.dir>${project.basedir}/../core/src/main/java</core.manual.dir>
        <core.manual.java.dir>${project.basedir}/../core/src/main/java</core.manual.java.dir>
        <core.manual.java.resources>${project.basedir}/../core/src/main/resources</core.manual.java.resources>
        <core.generated.java.resources>${project.basedir}/../core/target/src/main/resources</core.generated.java.resources>
        <core.manual.test.resources>${project.basedir}/../core/src/test/resources</core.manual.test.resources>
        <core.generated.test.dir>${project.basedir}/../core/target/src/test/java</core.generated.test.dir>
        <core.manual.test.dir>${project.basedir}/../core/src/test/java</core.manual.test.dir>
        <angular.base.dir>${project.basedir}/../angular</angular.base.dir>
        <angular.resources.dir>${project.basedir}/../angular/resources</angular.resources.dir>
        <angular.css.dir>${project.basedir}/../angular/css</angular.css.dir>
        <angular.test.dir>${project.basedir}/../angular/test</angular.test.dir>
        <angular.manual.dir>${project.basedir}/../angular/src/app</angular.manual.dir>
        <angular.generated.dir>${project.basedir}/../angular/target/src/app</angular.generated.dir>
        <angular.ngrx.generated.dir>${angular.generated.dir}/store</angular.ngrx.generated.dir>
        <angular.ngrx.manual.dir>${angular.manual.dir}/store</angular.ngrx.manual.dir>
        <angular.model.dir>${angular.generated.dir}</angular.model.dir>
        <angular.service.dir>${angular.generated.dir}</angular.service.dir>
        <angular.service.impl.dir>${angular.manual.dir}</angular.service.impl.dir>
        <angular.controller.dir>${angular.generated.dir}</angular.controller.dir>
        <angular.controller.impl.dir>${angular.manual.dir}</angular.controller.impl.dir>
        <angular.view.dir>${angular.generated.dir}</angular.view.dir>
        <angular.view.impl.dir>${angular.manual.dir}</angular.view.impl.dir>
        <angular.form.dir>${angular.generated.dir}</angular.form.dir>
        <webservice.project>${project.basedir}/../webservice</webservice.project>
        <webservice.generated.dir>${project.basedir}/../webservice/target/src/main</webservice.generated.dir>
        <webservice.manual.java.dir>${project.basedir}/../webservice/src/main/java</webservice.manual.java.dir>
        <!-- hibernate configuration -->
        <!-- default strategy to use when using inheritance -->
        <hibernate.inheritance.strategy>subclass</hibernate.inheritance.strategy>
        <!-- hibernate generator class to use for identifiers -->
        <hibernate.generatorClass>native</hibernate.generatorClass>
    </properties>
</project>