// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.zetaedrms.document.metadata;

import bw.co.roguesystems.zetaedrms.SearchObject;
import bw.co.roguesystems.zetaedrms.keycloak.KeycloakService;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.time.LocalDateTime;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/metadata")
@CrossOrigin()
@Tag(name = "Metadata", description = "Configuring different document metadata.")
public class MetadataApiImpl extends MetadataApiBase {


    private final KeycloakService keycloakService;
    
    public MetadataApiImpl(
        MetadataService metadataService, KeycloakService keycloakService    ) {
        
        super(
            metadataService        );
        this.keycloakService = keycloakService;
    }


    @Override
    public ResponseEntity<?> handleFindById(String id) {
        try {
            Optional<?> data = Optional.of(metadataService.findById(id)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            Optional<?> data = Optional.of(metadataService.getAll()); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try {
            Optional<?> data = Optional.of(metadataService.getAll(pageNumber, pageSize)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handlePagedSearch(SearchObject<String> criteria) {
        try {
            Optional<?> data = Optional.of(metadataService.search(criteria)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(String id) {
        try {
            Optional<?> data = Optional.of(metadataService.remove(id)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSave(MetadataDTO metadata) {
        try {

            if(StringUtils.isBlank(metadata.getId())) {
                
                metadata.setCreatedAt(LocalDateTime.now());
                metadata.setCreatedBy(keycloakService.getJwt().getClaimAsString("preferred_username"));
            } else {

                metadata.setModifiedAt(LocalDateTime.now());
                metadata.setModifiedBy(keycloakService.getJwt().getClaimAsString("preferred_username"));
            }

           
            Optional<?> data = Optional.of(metadataService.save(metadata)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(String criteria) {
        try {
            Optional<?> data = Optional.of(metadataService.search(criteria, null)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }
}