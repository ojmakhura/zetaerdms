// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.zetaedrms.document;

import bw.co.roguesystems.zetaedrms.SearchObject;
import bw.co.roguesystems.zetaedrms.keycloak.KeycloakService;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.io.File;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/document")
@CrossOrigin()
@Tag(name = "Access Point Type", description = "Configuring different resource types accessible.")
public class DocumentApiImpl extends DocumentApiBase {

    private final KeycloakService keycloakService;

    public DocumentApiImpl(DocumentService documentService, KeycloakService keycloakService) {

        super(documentService);
        this.keycloakService = keycloakService;
    }

    @Override
    public ResponseEntity<?> handleDownload(String filePath) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleFindById(String id) {
        try {
            Optional<?> data = Optional.of(documentService.findById(id)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleFindMyRoot() {

        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Jwt jwt = (Jwt) authentication.getPrincipal();

            System.out.println(jwt.getClaims());

            String username = jwt.getClaimAsString("preferred_username");
            String userId = jwt.getClaimAsString("sub");

            DocumentDTO root = documentService.getUserRoot(userId);
            Optional<?> data = Optional.of(root); // TODO: Add custom code here;
            ResponseEntity<?> response;

            response = ResponseEntity.status(HttpStatus.OK).body(data.get());

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }

    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handlePagedSearch(SearchObject<String> criteria) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(String id) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSave(DocumentDTO document) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Jwt jwt = (Jwt) authentication.getPrincipal();

            System.out.println(jwt.getClaims());

            String username = jwt.getClaimAsString("preferred_username");
            String userId = jwt.getClaimAsString("sub");

            if (document.getParent() == null || StringUtils.isBlank(document.getParent().getId())) {
                document.setParent(checkRootDir(userId, username));
            }

            if(!document.getFilePath().contains('/' + userId)) {
                document.setFilePath('/' + userId + '/' + document.getFilePath());
            }

            if(StringUtils.isBlank(document.getId())) {

                document.setCreatedAt(LocalDateTime.now());
                document.setCreatedBy(username);
            } else {

                document.setModifiedAt(LocalDateTime.now());
                document.setModifiedBy(username);
            }

            Optional<?> data = Optional.of(documentService.save(document)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(String criteria) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if (data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleUpload(String parentPath, Set<MultipartFile> files) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Jwt jwt = (Jwt) authentication.getPrincipal();

            String username = jwt.getClaimAsString("preferred_username");
            String userId = jwt.getClaimAsString("sub");

            if(!parentPath.contains('/' + userId)) {
                if(parentPath.equals("/")) {
                    parentPath = '/' + userId;
                } else {
                    parentPath = '/' + userId + parentPath;
                }

            }

            Optional<?> data = Optional.of(documentService.upload(parentPath, username, files)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleUploadOne(String parentPath, MultipartFile file) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Jwt jwt = (Jwt) authentication.getPrincipal();

            System.out.println(jwt.getClaims());

            String username = jwt.getClaimAsString("preferred_username");
            String userId = jwt.getClaimAsString("sub");

            Collection<DocumentDTO> docs = documentService.upload(userId, username, Set.of(file));
            Optional<?> data = Optional.of(docs.iterator().next()); // TODO: Add custom code here;
            ResponseEntity<?> response;

            response = ResponseEntity.status(HttpStatus.OK).body(data.get());

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    private DocumentDTO checkRootDir(String userId, String username) {

        String rootPath = String.format("/%s", userId);

        DocumentDTO root = documentService.getUserRoot(userId);
        if (root == null) {
            root = new DocumentDTO();
            root.setFilePath(rootPath);
            root.setCreatedAt(LocalDateTime.now());
            root.setCreatedBy(username);
            root.setDir(true);
            root.setVersion("1.0");
            root.setContentType("DIR");
            root.setDocumentId(UUID.randomUUID().toString());
            root.setDocumentName(userId);

            root = documentService.save(root);
        }

        return root;
    }

    @Override
    public ResponseEntity<?> handleGetFileList(String parentPath) {
        try {

            if (parentPath == null || parentPath.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Parent path cannot be null or empty");
            }

            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Jwt jwt = (Jwt) authentication.getPrincipal();

            System.out.println(jwt.getClaims());

            String username = jwt.getClaimAsString("preferred_username");
            String userId = jwt.getClaimAsString("sub");

            checkRootDir(userId, username);

            if (parentPath.equals("/")) {
                parentPath = "/" + userId;

                return ResponseEntity.status(HttpStatus.OK).body(this.documentService.getFileList(parentPath));
            }

            Optional<?> data = Optional.of(this.documentService.getFileList(parentPath)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            response = ResponseEntity.status(HttpStatus.OK).body(data.get());

            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }
}