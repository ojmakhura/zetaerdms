// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.zetaedrms.user;

import io.swagger.v3.oas.annotations.tags.Tag;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bw.co.roguesystems.zetaedrms.keycloak.KeycloakUserService;
import bw.co.roguesystems.zetaedrms.organisation.department.DepartmentService;

@RestController
@RequestMapping("/user")
@CrossOrigin()
@Tag(name = "User", description = "Managing users.")
public class UserApiImpl extends UserApiBase {
    
    private final KeycloakUserService keycloakUserService;
    
    public UserApiImpl(DepartmentService departmentService, KeycloakUserService keycloakUserService) {
        
        super();
        this.keycloakUserService = keycloakUserService;
    }
    

    @Override
    public ResponseEntity<?> handleAddClientRoles(String clientId, Set<String> roles, String userId) {
        try{
            logger.debug("Add user/client roles with client Id "+clientId+",roles "+roles+" and user Id "+userId);
            UserDTO rep = this.keycloakUserService.addClientRoles(clientId, roles, userId);

            if(rep == null || StringUtils.isBlank(rep.getUserId())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("User with userId %s does not exist.", clientId));
            }
    
            return ResponseEntity.ok(rep);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleAddRole(String userId, String role) {
        try{
            logger.debug("Add role to user.");
            
            return ResponseEntity.ok(this.keycloakUserService.updateUserRoles(userId, role, 1));
        } catch(RuntimeException e){
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleChangePassword(String userId, String newPassword) {
        try{
            logger.debug("Change User password with user id" + userId + " and new password " + newPassword);
            this.keycloakUserService.updateUserPassword(userId, newPassword);

            return ResponseEntity.ok().body("User password updated.");
    
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("User password not updated.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindByClientRoles(Set<String> roles, String clientId) {
        try{
            logger.debug("Search user by client roles.");
            Collection<UserDTO> users = this.keycloakUserService.getUsersByRoles(clientId, roles);

            return ResponseEntity.ok(users);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindByDepartmentId(String departmentId) {
        try {
            Optional<?> data = Optional.of(this.keycloakUserService.getDepartmentUsers(departmentId)); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleFindByDepartmentName(String departmentName) {
        try {
            Optional<?> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleFindByRealmRoles(Set<String> roles) {
        try{
            logger.debug("Search user by realm roles.");
            Collection<UserDTO> users = this.keycloakUserService.getUsersByRoles(roles);

            return ResponseEntity.ok(users);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindUserById(String userId) {
        try{
            logger.debug("Search user by Id "+userId);
            UserDTO rep = this.keycloakUserService.findUserById(userId);

            if (rep != null) {
                return ResponseEntity.ok(rep);
            }
    
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleLoadUsers() {
        try{
            logger.debug("Load Users ");
            return ResponseEntity.ok().body(this.keycloakUserService.loadUsers());
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemoveRole(String userId, String role) {
        try{
            logger.debug("Remove role to user.");
            
            return ResponseEntity.ok(this.keycloakUserService.updateUserRoles(userId, role, -1));
        } catch(RuntimeException e){
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSaveUser(UserDTO user) {
        try{
            logger.debug("Save User "+user);

            if(StringUtils.isBlank(user.getUserId()))
                return this.keycloakUserService.createUser(user);
            else {
                keycloakUserService.updateUser(user);
            }
                
            if(user == null || StringUtils.isBlank(user.getUserId())) {
                return ResponseEntity.badRequest().body("The user could not be saved.");
            }
    
            return ResponseEntity.ok().body(user);
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();

            if(e.getMessage().contains("User exists with same email")) {

                return ResponseEntity.badRequest().body("User exists with same email");
            }

            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(String criteria) {
        try{
            logger.debug("Search user by criteria"+criteria);

            System.out.println("---------------------");
            System.out.println(criteria);

            List<UserDTO> users = this.keycloakUserService.search(criteria);

            return ResponseEntity.ok(users);
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleUpdateUserName(String userId, String username) {
        try{
            logger.debug("Update the user's Username with username "+username+"  and user Id"+userId);
            Optional<Boolean> data = Optional.empty(); // TODO: Add custom code here;
            ResponseEntity<Boolean> response;
    
            if (data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }
}